{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { findFlights } from '../fn/flights/find-flights';\nimport { findFlights$Plain } from '../fn/flights/find-flights-plain';\nimport { getFlights } from '../fn/flights/get-flights';\nimport { getFlights$Plain } from '../fn/flights/get-flights-plain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightsService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `getFlights()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getFlights$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getFlights$Plain$Response(params, context) {\n    return getFlights$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getFlights$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getFlights$Plain(params, context) {\n    return this.getFlights$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getFlights()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getFlights$Response(params, context) {\n    return getFlights(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getFlights$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getFlights(params, context) {\n    return this.getFlights$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findFlights()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlights$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlights$Plain$Response(params, context) {\n    return findFlights$Plain(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlights$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlights$Plain(params, context) {\n    return this.findFlights$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlights()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlights$Response(params, context) {\n    return findFlights(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlights$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlights(params, context) {\n    return this.findFlights$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightsService.GetFlightsPath = '/Flights';\nFlightsService.FindFlightsPath = '/Flights/{id}';\nFlightsService.ɵfac = function FlightsService_Factory(t) {\n  return new (t || FlightsService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightsService,\n  factory: FlightsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,WAAW,QAAQ,4BAA4B;AAExD,SAASC,iBAAiB,QAAQ,kCAAkC;AAGpE,SAASC,UAAU,QAAQ,2BAA2B;AAEtD,SAASC,gBAAgB,QAAQ,iCAAiC;;;;AAIlE,OAAM,MAAOC,cAAe,SAAQL,WAAW;EAC7CM,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,yBAAyB,CAACC,MAAgC,EAAEC,OAAqB;IAC/E,OAAOP,gBAAgB,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACnE;EAEA;;;;;;EAMAP,gBAAgB,CAACM,MAAgC,EAAEC,OAAqB;IACtE,OAAO,IAAI,CAACF,yBAAyB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACzDd,GAAG,CAAEe,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAC,mBAAmB,CAACN,MAA0B,EAAEC,OAAqB;IACnE,OAAOR,UAAU,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7D;EAEA;;;;;;EAMAR,UAAU,CAACO,MAA0B,EAAEC,OAAqB;IAC1D,OAAO,IAAI,CAACK,mBAAmB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnDd,GAAG,CAAEe,CAAsC,IAAsBA,CAAC,CAACC,IAAI,CAAC,CACzE;EACH;EAEA;;EAGA;;;;;;EAMAE,0BAA0B,CAACP,MAAgC,EAAEC,OAAqB;IAChF,OAAOT,iBAAiB,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EACpE;EAEA;;;;;;EAMAT,iBAAiB,CAACQ,MAAgC,EAAEC,OAAqB;IACvE,OAAO,IAAI,CAACM,0BAA0B,CAACP,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CAC1Dd,GAAG,CAAEe,CAA+B,IAAeA,CAAC,CAACC,IAAI,CAAC,CAC3D;EACH;EAEA;;;;;;EAMAG,oBAAoB,CAACR,MAA0B,EAAEC,OAAqB;IACpE,OAAOV,WAAW,CAAC,IAAI,CAACO,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC9D;EAEA;;;;;;EAMAV,WAAW,CAACS,MAA0B,EAAEC,OAAqB;IAC3D,OAAO,IAAI,CAACO,oBAAoB,CAACR,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACpDd,GAAG,CAAEe,CAA+B,IAAeA,CAAC,CAACC,IAAI,CAAC,CAC3D;EACH;;AAjGWV,cAAe,CAMVc,cAAc,GAAG,UAAU;AANhCd,cAAe,CAqDVe,eAAe,GAAG,eAAe;AArDtCf,cAAe;mBAAfA,cAAc;AAAA;AAAdA,cAAe;SAAfA,cAAc;EAAAgB,SAAdhB,cAAc;EAAAiB,YADD;AAAM","names":["map","BaseService","findFlights","findFlights$Plain","getFlights","getFlights$Plain","FlightsService","constructor","config","http","getFlights$Plain$Response","params","context","rootUrl","pipe","r","body","getFlights$Response","findFlights$Plain$Response","findFlights$Response","GetFlightsPath","FindFlightsPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Keorapetse Fani\\Documents\\projects\\Airlines_project\\ClientApp\\src\\app\\api\\services\\flights.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { findFlights } from '../fn/flights/find-flights';\r\nimport { FindFlights$Params } from '../fn/flights/find-flights';\r\nimport { findFlights$Plain } from '../fn/flights/find-flights-plain';\r\nimport { FindFlights$Plain$Params } from '../fn/flights/find-flights-plain';\r\nimport { FlightRm } from '../models/flight-rm';\r\nimport { getFlights } from '../fn/flights/get-flights';\r\nimport { GetFlights$Params } from '../fn/flights/get-flights';\r\nimport { getFlights$Plain } from '../fn/flights/get-flights-plain';\r\nimport { GetFlights$Plain$Params } from '../fn/flights/get-flights-plain';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightsService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `getFlights()` */\r\n  static readonly GetFlightsPath = '/Flights';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getFlights$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getFlights$Plain$Response(params?: GetFlights$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return getFlights$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getFlights$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getFlights$Plain(params?: GetFlights$Plain$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.getFlights$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getFlights()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getFlights$Response(params?: GetFlights$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    return getFlights(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getFlights$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getFlights(params?: GetFlights$Params, context?: HttpContext): Observable<Array<FlightRm>> {\r\n    return this.getFlights$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findFlights()` */\r\n  static readonly FindFlightsPath = '/Flights/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlights$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlights$Plain$Response(params: FindFlights$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FlightRm>> {\r\n    return findFlights$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlights$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlights$Plain(params: FindFlights$Plain$Params, context?: HttpContext): Observable<FlightRm> {\r\n    return this.findFlights$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlights()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlights$Response(params: FindFlights$Params, context?: HttpContext): Observable<StrictHttpResponse<FlightRm>> {\r\n    return findFlights(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlights$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlights(params: FindFlights$Params, context?: HttpContext): Observable<FlightRm> {\r\n    return this.findFlights$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>): FlightRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}